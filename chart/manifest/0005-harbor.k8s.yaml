apiVersion: v1
kind: Namespace
metadata:
  name: harbor
  namespace: harbor
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-chartmuseum
  namespace: harbor
data:
  CACHE_REDIS_PASSWORD: ""
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
data:
  CSRF_KEY: aVNYamwwNHVsVWJmek1WRTF6TG1GbnJqOGs3Sml4SFg=
  HARBOR_ADMIN_PASSWORD: SGFyYm9yMTIzNDU=
  POSTGRESQL_PASSWORD: Y2hhbmdlaXQ=
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
  secret: eEMzczZiZE95U1hBOUFNTw==
  secretKey: bm90LWEtc2VjdXJlLWtleQ==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
data:
  POSTGRES_PASSWORD: Y2hhbmdlaXQ=
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress
  namespace: harbor
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUlJSEhwYzlCa3hKUCtyNkRUeTNCeDh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl6TURFd05qQTRNVGsxTWxvWERUSTBNREV3TmpBNApNVGsxTWxvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFyUWJzK2xmMzMxKzFWNGZYdGlnaEtzMTdsRnl4WVJCSTVWSXZLdnhVbE9najEyUzMKRDVsS25BYnF0TGdGckRMQ1ZGYXhwQzlmWG1WOUJLS1dWUUljS0ZDRzk0Z3B5SEowMkdET1piYTlITmJjSlM3MQo0emY1MkREdExaa3d3SGNNQU5ncmhRTUg0YlU0ZnBVYmU5RjMrUjR2RVBMTGRBaWhWYUpGMjdXUDRDQkJHbk4rCjEvYnB1TlBKU0F4YlB3OTVOb3pXbWtOUHpaNE52YVhKaForZFV5RGlqT3JWdW02U3U0aDFOb1g4UnU2N05nZlgKQ01Sc3IvSkJ1NjRFRVNrQzZFUnJ2SVJ6em9OZHVUWGJYQ05MaHBnRzhCV3ZhZjFad2VqRmViSm9wZzVmRDVMMQo3UkhObEorNE94ZlZ5YlFjQ2d4MVhtSGpHRldQME45Y3pvZURHUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRVFzTzdxdVdnV08rYXJaVDUzeG1sdis2SnkwTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQm0va01xN0lxN1ljVythQmw4WmMwZWRyZUZWd2VTTSt0cUNVdmlXQ1pla3Z5RnRZZ1RUaG0yCjVCTDB2OG9qWElJNVQwWERtdnBKVGpKSmQvVmtSY0ZpRVprc1RUaEdwMzlWT2NVS2JXOGZoRGtWL2ZGKzl6azQKM3IxSWgwU0oxVXBEdEhMYWVyb212MFNpdUtlWWV6MzlLUmtqcVFQaURqaEpBVWNTZmh6dlJ3MEQ4NWtqQ0txZApDeEtzWjl1Y2NWY0g4eVhDYnd2Y1JIQXh2RzVYZTdoNENhTytZRVowUitJZDlrZjFkajU0eFR1clA5OVJacXVjCmYyV0VUaFdtWWZkZ1BrVUswS1BlMFNGY0Fyai91bEc5YmZGU2lJNXphL2xRRE5JdzI1bkFQMGxsQ2FTT3N6d2QKU1hKR0V5Sm5lUlh4djBOazdINWtNc1FpTHlwcXVUakwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURiVENDQWxXZ0F3SUJBZ0lSQUlWNW9sUCtXMFpDOVZpSE5kWndwRjh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl6TURFd05qQTRNVGsxTWxvWERUSTBNREV3TmpBNApNVGsxTWxvd0pERWlNQ0FHQTFVRUF4TVphR0Z5WW05eUxtdDFZbVV0YjNCekxteHZZMkZzYUc5emREQ0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFNeUs0Z1psZ1ZMYmtjYXlTSGFMWHNOb2pTcU4KZU1NUm85a3hST0tEZml2bkRQWlY3NmtRdWZ2WTFrVGVNWTYvNmU4dnVyV1hWVC9YU3UyZGYreThqdit2NnRqeQphWFZ1dnp5WW54amd4LzV3Q0hWZ2xKdUt3WDR0Q0QwbmNaQk05OThwU2xlMDUzOUtKR2szMmJZUDhWQUliOG1HCjdBVmp0UVl0RVNsZUM5YjJEdDlpa1I5YUhTY1hXVitmTnBNMTRNVFN4RDlaSCtoRWJ0MHJyY2QySWFsL3RIUWoKNlVla3pCK25wMjA3MVZvUHBldjJGRjd4dHZxVjFVNG43ZmhLYjZseVVFUW9qMWhsdTFGakFrTVZnOTZUK2IxdQpLY3ZjTzQ0cEhaNlJWZ2w0bGo1WDl1ZjQwNWNBc1VIUUNlQ1pCb2c4SklpOEJxTGlQajc5L1BvNFRpMENBd0VBCkFhT0JxVENCcGpBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVSQ3c3dXE1YUJZNzVxdGxQbmZHYQpXLzdvbkxRd1JnWURWUjBSQkQ4d1BZSVphR0Z5WW05eUxtdDFZbVV0YjNCekxteHZZMkZzYUc5emRJSWdhR0Z5ClltOXlMVzV2ZEdGeWVTNXJkV0psTFc5d2N5NXNiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUIKQURzTitsWXYzSEN5czdSV2JITVA2MG1ITUp1akl4ckM0Z0FOR1JNTTcxengxaDBmZk1FbW1aTk9oSXVsNXdGQgpJaGdwSVhNQVlrWC9wb0xJN2dKNEZ0YzEydGNVWXBpeGFoeWMyY2R0RlExR3VUbGNVTWtqdjFId0hhZ2FKYjZNClg5WFhlNmlEV0lqVG14RjdlcGJVU200Wk5WUTVjS0Q0S3l0cVZ1MSt2WWhVNW52UFJ6L0pJSmZha25maG1CblAKdlFZNXBjdXpobFdiYkUyVy8xMVlWdFFxeU1xVFlWQWJiMVc0cjc2QnE5WHI0NHVTdkxudFZuNWVFKzJGU3ZacwppeUlhVldXR2tPODBOZW1LMW1BaElBUGovdmN5ZkQ4VXlBdnBCeG9mYUhQeXdBL2dyekx0dHc3TlpFK0VlcG5FCkdGdkx0SytQdERoY04xa1FSemRQUXJrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBeklyaUJtV0JVdHVSeHJKSWRvdGV3MmlOS28xNHd4R2oyVEZFNG9OK0srY005bFh2CnFSQzUrOWpXUk40eGpyL3A3eSs2dFpkVlA5ZEs3WjEvN0x5Ty82L3EyUEpwZFc2L1BKaWZHT0RIL25BSWRXQ1UKbTRyQmZpMElQU2R4a0V6MzN5bEtWN1RuZjBva2FUZlp0Zy94VUFodnlZYnNCV08xQmkwUktWNEwxdllPMzJLUgpIMW9kSnhkWlg1ODJrelhneE5MRVAxa2Y2RVJ1M1N1dHgzWWhxWCswZENQcFI2VE1INmVuYlR2VldnK2w2L1lVClh2RzIrcFhWVGlmdCtFcHZxWEpRUkNpUFdHVzdVV01DUXhXRDNwUDV2VzRweTl3N2ppa2RucEZXQ1hpV1BsZjIKNS9qVGx3Q3hRZEFKNEprR2lEd2tpTHdHb3VJK1B2MzgramhPTFFJREFRQUJBb0lCQUVCc2xoaHhyRFFPMkhGLwpBZmZrbWVwdWFkZzNTd3dWNkVlbWp3M1JZTkl2S2hRRXFVSFU5Tjl3UXJ6YVJ6MnhFTnUzYXRWN1h1eUd3U0RxCmRMcDZBWWhqUGxNcXR6QzN1eUE0NmhPSjZUUW8wV0UzRkZlUmNyUnROcVVjWVZhVUI1YVFpTXZyUE9jSTBVTWEKeGtYajY1dkxySG9MTnhmVGVkY0NKdCtpc1pQNHgxa2dwTGNxVmIvYWwvSmFjQ3o5T0pGb2s2Q2JQTUJuU0c0cwo2V0EzbFFUb21SNmlNL3lqRmpEaWxZUkx4VU54ZFYwWEdRdXVucmpxSHIxVHp2cG5yaWw3M3JFaXh1aVFBYy8yClFqUlU3a3lVRjlUZVpSeUR3NVpEcHVGbW4vQUF1bUxLbTdleUF5R05laGFOcjFBbnB0SXFZSDZucDBuTXBabW4Kck5TeWNrRUNnWUVBek5FUzdVcjJ0dktwTDlmcmJwRmhrM3oyMW9zazk5UGxpeS9hQXkzZU5tNUpqc3huK3V5aQpTVkhyWGNGS2hUOXJnN01jT1VtYjI1aHBsNUJxMDNzT0pWb2VOWkQ4K2VDOHpYYWJSN05rRDc3aFdWRVl5Mm40ClZOVktUb0pTRGZWdFFKYUNHNUN4YU9KSGlhcGlneko5b0trd2JKYUdNZEEvalg0djVNK0Rpa2tDZ1lFQS82aEUKdEJRWW9SWXdzMjF1Sm9SSHEzcEx1ekJQckFQek93U1dRU1Vnc2t6dEdYeHZZUHo5ZHl2SUtlL0tNK2x5UGtTegpsUFFOaGluVk85YVBmRW0xdVA2cWl4a2xMeFhsa2R1U3NqaExtZlNvaHNPZGY1Vlk1a1o4RTJIVDlyYk1iV1lYCnpjVDlVVS93R1hwUG5VZENMZEVrQ3ZuNDF1bkE0bFVLb21zbnhNVUNnWUJqNmJIVDgvZTZjMUc1Tnhsd1RKZE8KL1d6a1oraFd4UlY2K3BMZGJpaXlZTWFkVkhWODRLYWlJY1l4YkROUUlRbnZxeFlmbEJybDJzblgxK2xrMU9pbgpxL2lFcFAvalhaQjhvbGxKZHVkZkR2eWJONFppNUlUeHpVSjhYZkp0UU1aVTlaYnVuMzBMN3laNnI1Vnk3dFI5CjVVcnNEZG5VdndQaG9DYjQ5WW56a1FLQmdHK0ZTMUx5WVR3RG5nTG0vV0czMmp1bkFWb0tYUGJBVWwyd1JvcnMKVXpMejg0bG1pbjlZWElpYmhKa21qS0hRZDVGS0Ryd3ZLYWNZb0hlVnhNbUdyY3FnN0d2NDhBdDJGY3BtYWJ0cwpheTRoVjFKU0NtWVpFOHAvZktoSHlGcWFxdG9kNnN4TDNlU1daam4yN0x2QzFjOStwNlpTSElaRE9XeUJoRDROCldDK3hBb0dBTFhrTzVLM014Z3c0UTZVbm82UUxYTHl1Vk9HS09NdndWckNyTFh3RWNyRTE3c2RzWVhzcS9ENUcKVmtDOXM5ZGs3S1pjVlRCOW1DZ21wcGJ0eFlRQ3hZTldOYWNra3pPbzA1L012ZGFZWGdiUm9GZ2tVZFJTSkxCKwo3VVhCaWFFdXJDRjRxTnFiN2ZUdzlCTUZnNGlXeExPem9MS2NEOTc5bExGNXoxWlcwTlk9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
type: kubernetes.io/tls
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
data:
  JOBSERVICE_SECRET: SzV6RUdUcWQ5bTQ1bERzRw==
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    component: notary
    heritage: Helm
    release: harbor
  name: harbor-notary-server
  namespace: harbor
data:
  NOTARY_SERVER_DB_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBoYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxl
  NOTARY_SIGNER_DB_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBoYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzaWduZXI/c3NsbW9kZT1kaXNhYmxl
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQVBrQVQ2eUlrRzhsL2poalNUd3ZXcEF3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNekF4TURZd09ERTVOVEphRncweQpOREF4TURZd09ERTVOVEphTUJzeEdUQVhCZ05WQkFNVEVHaGhjbUp2Y2kxdWIzUmhjbmt0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEc0ttZjFnamlURnJTNkc1MTVBWmgrZ3FNeTg2NFUKcU5DaVZWVm9wd0hVRTQzVlV6SjhaY0RjNU81SCtOeXR1VnNjMTRoNkhBS0kvWXROOCtHTEdWUkNzRk5HcDJsKwppbVArZ2paSTFkTmhNL2kycnNDb2crZ3lWTlhtekZhR3FlOTFsRExlNjhIR01vQzIwamt2Y1dIQ3hrWVNyazUzCndDbksyM1B1Qlo0UkE4Wk1oejJxUmFmU1hkL0x1ZWhYV3JlemE1QjJrbmVYSFVucG1MQjRGa2kzRFN5QlBUL0QKdlJoK1Z5b2FQZlNxSTJwMkFoV2xMS2tYOE5qNjJjMEVsem1lY2RrQ1lqanVJNzgvVUZqTWFIUU52Y3JubDRuawphT3c0bUlPaDU0cWVlQjExWlBDdUlvaVdaN0o3VXJIZmJVZHVmNUZNbXVhMHFEdTZyYkd2NFNPYkFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVTl2UTNJNFFEOFlONHZoUEkxMXhPWEgvOQpQQlV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUlyRmZOTkpuSU92YjVWK1ZSelZkYVFXakxWWERpaytYbGc5Cnhza0FxZm01SEdqdjl1RmI1a214YkluOHRYbGlraDcxdFoxeHBhbDhNRlhwSDJ4MGpNY2NSWnFOTTBnV1Z5dVkKMnhmaGpJL2hxS1NXOG9vYnhtRHBzUElHdHNnMzNGM0VnREVuYTFnU2dUMWZqZVRZTWxmNjJiRHA3enp4ZzA5SwpyMExzWkxUWGwvZmFJNVFScVllM2prZjlWeURFTTZOVTVVd3lFRng2OVZsUitZaWNCNit3UFBLcTZFVUhyRWhvCnNXMW5ORWdicnpDOUhudWRSdlNiNnZIT3FVeTcwSC9TdlBybmJNN3lKczQ4bEJNZlJmUlRZemxpWXdSUm4vVDAKZ1Qwa3VlUExrYnBXSXlxdmtjakptN0hERVVtbmF0NkpZSUZnK01QUFd0RjIrUUtsWlk0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogImhhcmJvci1ub3Rhcnktc2lnbmVyIiwKICAgICJwb3J0IjogIjc4OTkiLAogICAgInRsc19jYV9maWxlIjogIi9ldGMvc3NsL25vdGFyeS9jYS5jcnQiLAogICAgImtleV9hbGdvcml0aG0iOiAiZWNkc2EiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAaGFyYm9yLWRhdGFiYXNlOjU0MzIvbm90YXJ5c2VydmVyP3NzbG1vZGU9ZGlzYWJsZSIKICB9LAogICJhdXRoIjogewogICAgInR5cGUiOiAidG9rZW4iLAogICAgIm9wdGlvbnMiOiB7CiAgICAgICJyZWFsbSI6ICJodHRwczovL2NvcmUuaGFyYm9yLmRvbWFpbi9zZXJ2aWNlL3Rva2VuIiwKICAgICAgInNlcnZpY2UiOiAiaGFyYm9yLW5vdGFyeSIsCiAgICAgICJpc3N1ZXIiOiAiaGFyYm9yLXRva2VuLWlzc3VlciIsCiAgICAgICJyb290Y2VydGJ1bmRsZSI6ICIvcm9vdC5jcnQiCiAgICB9CiAgfQp9
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAaGFyYm9yLWRhdGFiYXNlOjU0MzIvbm90YXJ5c2lnbmVyP3NzbG1vZGU9ZGlzYWJsZSIsCiAgICAiZGVmYXVsdF9hbGlhcyI6ICJkZWZhdWx0YWxpYXMiCiAgfQp9
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURSekNDQWkrZ0F3SUJBZ0lSQUtpYXg2ZmJTT1BKOHMwVzRrWE9IV2t3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNekF4TURZd09ERTVOVEphRncweQpOREF4TURZd09ERTVOVEphTUI4eEhUQWJCZ05WQkFNVEZHaGhjbUp2Y2kxdWIzUmhjbmt0YzJsbmJtVnlNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF1c29JL3UyajNvMzF1cEp0R0Zjekp2TU8KVExtcDBzRFE5OEY5Qy9iOVYydlBsRDZpaDFDdklvbmRPTldOcFNheUxreDE2enlCNGU4L0VCbjBBdHRUS3BOTgpRTWZEUU9hdERHUTRGcDFUMDVTTk04VXJrUFIzS0tINEpRbnViRUd6clhiQ213M2ZyWWwwdFV0QXpCamhVWjFFCmlJSmlTWXBBVklqZG9KMGNQQkJPL3lSVmdscXhQbmtyMUNLdjMvcFd1dnFmS2ZuY29uQlRXaXVEd0dud2JXdEUKVjgwd2ZLaGswV1REeVBHeG8yN043cERjbEZRZlRwa2YveSttdVY5ZUpHL2lKVUFVYWtCb2Fnc0dUUXc2bEJNMApCdHlFSldHdFlIVmgzbndDdXZ1UW1TNk95bWFuQWVMQ2xhemxSbks3S05lL3dHTlBHdUNaUHBTclZLNm5Ed0lECkFRQUJvNEdCTUg4d0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGUGIwTnlPRUEvR0RlTDRUeU5kYwpUbHgvL1R3Vk1COEdBMVVkRVFRWU1CYUNGR2hoY21KdmNpMXViM1JoY25rdGMybG5ibVZ5TUEwR0NTcUdTSWIzCkRRRUJDd1VBQTRJQkFRQ3h4cXVQdmlMWkUvTEhzVVpEZFZjNHZIRktZR09QNVhkd2FHbDd0SHpzUXJVR0JJcTMKMGhxbXlVeTY0ZWtZK1U2d3Y3SGlIU0VEL0dXSE9MU0J5ZUdNUGVTc0FoOXMwd215SHdycENsOWs1RVZGOVB6dAp5c3BzYUZPSjJGck1DREppTkdGdGlySzdUczBaNzd4cW9XMWR5T0E4N3A4TFJRaGNvcW1ndGliYXgyNDlWeEh2ClNMUHZJUDZqdDl2UXVXS0ZlWkovcW45cWErdjdsSTFmNWovZlVuL0VmMVQxS0c2SmhJcnZWdzRyMzZpWUF5eDUKaEY0dXltelVmMXc2Z1FwMTVTZzczMS9ORmpmY1pXSkVlbk9FOVZXd3A5aitYdzVJYVBCcHBTbnFuRDZxdlFjRgpQMmhwNTFSZEZMeVBSSVpqRjdYSEMwOW1qZTVSWDNWbzVHdVkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdXNvSS91MmozbzMxdXBKdEdGY3pKdk1PVExtcDBzRFE5OEY5Qy9iOVYydlBsRDZpCmgxQ3ZJb25kT05XTnBTYXlMa3gxNnp5QjRlOC9FQm4wQXR0VEtwTk5RTWZEUU9hdERHUTRGcDFUMDVTTk04VXIKa1BSM0tLSDRKUW51YkVHenJYYkNtdzNmcllsMHRVdEF6QmpoVVoxRWlJSmlTWXBBVklqZG9KMGNQQkJPL3lSVgpnbHF4UG5rcjFDS3YzL3BXdXZxZktmbmNvbkJUV2l1RHdHbndiV3RFVjgwd2ZLaGswV1REeVBHeG8yN043cERjCmxGUWZUcGtmL3krbXVWOWVKRy9pSlVBVWFrQm9hZ3NHVFF3NmxCTTBCdHlFSldHdFlIVmgzbndDdXZ1UW1TNk8KeW1hbkFlTENsYXpsUm5LN0tOZS93R05QR3VDWlBwU3JWSzZuRHdJREFRQUJBb0lCQUgzRDFuYSt6cHprZkZVWQpqZmZiam9kbEUzVzVkSXlBWXJMT1JrR3VGVG10VDJDREk2OTBOZGROZC9QeVphS1RBVm1IQmNaVFFTZzhpL3R0Clhnd21YRUxJVnpXTXl2eUIxSFlKYkhKZGo3bGZ4Z3JiY00veXFlQmozYzRpZDdQUU1RaFVkQWN1T2pKLzRHTEkKdm1JdFJsaExTWCtZT2xGRmtyYllTRkVDTjZhQU5mbGZjbVZ2bDYrUGJzTFNJRWZ5TUFMTzhvVGtXOXhUT0tTcQo2NTYzR1o5OWVwRnRYMmxtZjZ1TmRtNTZSdE5xSXY2TFJGQ013dzlxQTZQUFluTWxUZzRWbjR5LzJ4YitlejlkCi9Fd1hoUU12cGF2cVlLb1UwdXRPL2Z1L2FIUmdMcmNJOERwZ09NcGFZNFdibUN1anFxUTRhbVduUEV0Y2lUS2UKRkhHL3JWRUNnWUVBNFA3NEN2djAyTXYweGVMZXRyNEtXWFptVVdxVEdrZkhKUGVpd3laZklDcW1xWFQ0UkxWSwp0OXQrdTAza3JYc2JqWER4blJnTGV5MHRCaEZaOTVoTVlsd2ROaU1iZXk2elUyc1ZrZUltVkVvRkdSNElMU1czCjVGUnB1L214ekZsdmlKQ3lRTnRsWklaWDNYMmpFZUhlbks3SnNHZmFkM1N0NzZOVEF0ZEZmcDBDZ1lFQTFJZEYKalc5bWhna0EzUHBBdDhpRlhreVVkVnlZZVdteE4yK2RDMmpGYWNkSzZUYXRJLzNSNk40RFF2TC8vVzN6TmR1NAowL0xjajJnRmFFd3ljeDFjMGFTNTlCdXNYaWYzcmJxWStzMzlhYWZvdHY5VzJUckl2NUVIa1YwTVgxRnpJdVloCmRNWDJSci9NQmlhNHNxbzF2OFhMUjhLSUJOUVBicUgwcDFHbmxwc0NnWUVBajdGbXVxVWxQMXdxckVMekYrU1EKK1lmTFdzM2t1dEVDbDFKc0taUVZCcGNXcjN6Ym5nM21kVHVDV1o4cW43elM0T2N6OTY5R2pkbFJPdUhVQW5QSwp2THExa1VDa3FXd3U3T1NqOXZKbXBraExyem5sNE9lSTVSTWdJQVFkRURSQ0xnYXpRUWFkWDdFSTVwVDVrMDhjCmZCYUpDdGVZeDlmRnloa1Z4K2V5STJVQ2dZQml1UStDK3F1S09hWnYvOE9PVzVRd1VLeHB0QUNUN1pmSG80NDAKM1k5T2FxZ09tenBrVEtSMFlxVHJOWXZhUW5mR25mRkdhenN2Vm1la29qaVJKcU9XTXNtNmJoeHNoRzVXQWliTAo0bUlEOFY1MW16alJvYS9jNU5hNkhKb0JzUWtsdmZidWtvS3JMSzd1Y0pBOVZqbXZnb2JDSjhnZFRoQjVHTHhYCitPTTdYd0tCZ1FDS1B6RkdrUGZBajVhbTJPNkxHNkpQM3JrNGxDUnNBdXpTTXhKTEw3MmJqMkFYa21lTnc3Y0cKZnFOT0FLQ0c0MUxFNzBxUkVSZHR4ZWZ3OW5tTmtXZityTWNDV3lJTGZ1Y0p4SnhmWTRkOHpQRHBZcW9NanpaRwp0elAzMkVodVhzY2FSMkQxRlF3M2Jxajk3VEdOaHZCS3UrR3ptekgzUE9IWVBvU3Z6bkg5Nmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
data:
  REGISTRY_HTTP_SECRET: aWs1UURpTDRwSG12MDlIbA==
  REGISTRY_REDIS_PASSWORD: ""
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry-htpasswd
  namespace: harbor
data:
  REGISTRY_HTPASSWD: aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJEs0dUcyWk40Y1JJR3hKWFhLT1pGS3U2Zmk5MXNjREh2dmJXa2RwallsbkRqM3dqYWdJV1Rx
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
  namespace: harbor
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
data:
  gitHubToken: ""
  redisURL: cmVkaXM6Ly9oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-chartmuseum
  namespace: harbor
data:
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  BASIC_AUTH_USER: chart_controller
  CACHE: redis
  CACHE_REDIS_ADDR: harbor-redis:6379
  CACHE_REDIS_DB: "3"
  CHART_POST_FORM_FIELD_NAME: chart
  CONTEXT_PATH: ""
  DEBUG: "false"
  DEPTH: "1"
  DISABLE_API: "false"
  DISABLE_METRICS: "false"
  DISABLE_STATEFILES: "false"
  INDEX_LIMIT: "0"
  LOG_JSON: "true"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  PORT: "9999"
  PROV_POST_FORM_FIELD_NAME: prov
  STORAGE: local
  STORAGE_LOCAL_ROOTDIR: /chart_storage
  STORAGE_TIMESTAMP_TOLERANCE: 1s
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
data:
  CHART_CACHE_DRIVER: redis
  CHART_REPOSITORY_URL: http://harbor-chartmuseum
  CONFIG_PATH: /etc/core/app.conf
  CORE_LOCAL_URL: http://127.0.0.1:8080
  CORE_URL: http://harbor-core:80
  DATABASE_TYPE: postgresql
  EXT_ENDPOINT: https://core.harbor.domain
  HTTPS_PROXY: ""
  HTTP_PROXY: ""
  JOBSERVICE_URL: http://harbor-jobservice
  LOG_LEVEL: info
  NOTARY_URL: http://harbor-notary-server:4443
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,jfrog-artifactory
  PORT: "8080"
  PORTAL_URL: http://harbor-portal
  POSTGRESQL_DATABASE: registry
  POSTGRESQL_HOST: harbor-database
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_SSLMODE: disable
  POSTGRESQL_USERNAME: postgres
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_STORAGE_PROVIDER_NAME: filesystem
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
  TRIVY_ADAPTER_URL: http://harbor-trivy:8080
  WITH_CHARTMUSEUM: "true"
  WITH_NOTARY: "true"
  WITH_TRIVY: "true"
  _REDIS_URL_CORE: redis://harbor-redis:6379/0?idle_timeout_seconds=30
  _REDIS_URL_REG: redis://harbor-redis:6379/2?idle_timeout_seconds=30
  app.conf: |
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice-env
  namespace: harbor
data:
  CORE_URL: http://harbor-core:80
  HTTPS_PROXY: ""
  HTTP_PROXY: ""
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
data:
  config.yml: |
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
data:
  nginx.conf: |
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
data:
  config.yml: |
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
  namespace: harbor
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: chartmuseum
    heritage: Helm
    release: harbor
  name: harbor-chartmuseum
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice-scandata
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-chartmuseum
  namespace: harbor
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    app: harbor
    component: chartmuseum
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    app: harbor
    component: core
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
spec:
  ports:
    - port: 5432
  selector:
    app: harbor
    component: database
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    app: harbor
    component: jobservice
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-notary-server
  namespace: harbor
spec:
  ports:
    - port: 4443
  selector:
    app: harbor
    component: notary-server
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-notary-signer
  namespace: harbor
spec:
  ports:
    - port: 7899
  selector:
    app: harbor
    component: notary-signer
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: harbor
    component: portal
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-redis
  namespace: harbor
spec:
  ports:
    - port: 6379
  selector:
    app: harbor
    component: redis
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
spec:
  ports:
    - name: http-registry
      port: 5000
    - name: http-controller
      port: 8080
  selector:
    app: harbor
    component: registry
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
spec:
  ports:
    - name: http-trivy
      port: 8080
      protocol: TCP
  selector:
    app: harbor
    component: trivy
    release: harbor
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: chartmuseum
    heritage: Helm
    release: harbor
  name: harbor-chartmuseum
  namespace: harbor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: chartmuseum
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: 3a145cb777903ca8ff8fcfcb3c25ed9ee7a426a8b01cf024d6e52d92458b4564
        checksum/secret: a656851d5f972f5f6dd05a5c13a5a0b21527971b9ec7dd91ce85b5699d41790a
        checksum/secret-core: a7f246514dbcdff154a0a21b3f2962d643591ec01abf1779a12d327deeca604c
      labels:
        app: harbor
        chart: harbor
        component: chartmuseum
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: AWS_SDK_LOAD_CONFIG
              value: "1"
          envFrom:
            - configMapRef:
                name: harbor-chartmuseum
            - secretRef:
                name: harbor-chartmuseum
          image: goharbor/chartmuseum-photon:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health
              port: 9999
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: chartmuseum
          ports:
            - containerPort: 9999
          readinessProbe:
            httpGet:
              path: /health
              port: 9999
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /chart_storage
              name: chartmuseum-data
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
        - name: chartmuseum-data
          persistentVolumeClaim:
            claimName: harbor-chartmuseum
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: core
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: core
      release: harbor
  template:
    metadata:
      annotations:
        checksum/configmap: 24aaa083b7f838fdfd213e9dbc51045412433480648dfe20268f90e9b7927064
        checksum/secret: 81fac13a5a0d2343c7ce2b99db3632f12c3477910f92fb02b4aa03071136e641
        checksum/secret-jobservice: 15bf3ba6e2cf98ed307593a9f6ed1091d2396f1d52727425a339406bed9d69c0
      labels:
        app: harbor
        component: core
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: JOBSERVICE_SECRET
                  name: harbor-jobservice
          envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
          image: goharbor/harbor-core:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            periodSeconds: 10
          name: core
          ports:
            - containerPort: 8080
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            periodSeconds: 10
          startupProbe:
            failureThreshold: 360
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
        - configMap:
            items:
              - key: app.conf
                path: app.conf
            name: harbor-core
          name: config
        - name: secret-key
          secret:
            items:
              - key: secretKey
                path: key
            secretName: harbor-core
        - name: token-service-private-key
          secret:
            secretName: harbor-core
        - name: ca-download
          secret:
            secretName: harbor-ingress
        - emptyDir: {}
          name: psc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: jobservice
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: 41138a089428e6776014e59b1a37c5e69bedc9331ccdb1f382f1950882ec1b7e
        checksum/configmap-env: 5c0e2cf333f81a4f19f13c25cb45f2b2f5353c9bd05f59e8cbb6b59cc0eb7195
        checksum/secret: c6a4cec889c4ab745a838db1a340400a9eeb1bcccc784d806ff81d56dc5072cb
        checksum/secret-core: eb6b3ce993a5a4f24f379b3d7711b7a613134e008ea92515f71809fc2bb56276
      labels:
        app: harbor
        chart: harbor
        component: jobservice
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
          envFrom:
            - configMapRef:
                name: harbor-jobservice-env
            - secretRef:
                name: harbor-jobservice
          image: goharbor/harbor-jobservice:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/v1/stats
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: jobservice
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /api/v1/stats
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
            - mountPath: /var/scandata_exports
              name: job-scandata-exports
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
        - configMap:
            name: harbor-jobservice
          name: jobservice-config
        - name: job-logs
          persistentVolumeClaim:
            claimName: harbor-jobservice
        - name: job-scandata-exports
          persistentVolumeClaim:
            claimName: harbor-jobservice-scandata
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: notary-server
    heritage: Helm
    release: harbor
  name: harbor-notary-server
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: notary-server
      release: harbor
  template:
    metadata:
      annotations:
        checksum/secret: f7c297b1787d62d3528b7b0c5a41da9bf4cd07b4e1c27331bb403b9a0de121cc
        checksum/secret-core: 7bfe94ad28c52fb88e745f4c82138aff0b5a96e41809ec9fe80a22867911b4d3
      labels:
        app: harbor
        chart: harbor
        component: notary-server
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: MIGRATIONS_PATH
              value: migrations/server/postgresql
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  key: NOTARY_SERVER_DB_URL
                  name: harbor-notary-server
          image: goharbor/notary-server-photon:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /_notary_server/health
              port: 4443
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: notary-server
          readinessProbe:
            httpGet:
              path: /_notary_server/health
              port: 4443
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/notary/server-config.postgres.json
              name: config
              subPath: server.json
            - mountPath: /root.crt
              name: token-service-certificate
              subPath: tls.crt
            - mountPath: /etc/ssl/notary/ca.crt
              name: signer-certificate
              subPath: ca.crt
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
        - name: config
          secret:
            secretName: harbor-notary-server
        - name: token-service-certificate
          secret:
            secretName: harbor-core
        - name: signer-certificate
          secret:
            secretName: harbor-notary-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: notary-signer
    heritage: Helm
    release: harbor
  name: harbor-notary-signer
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: notary-signer
      release: harbor
  template:
    metadata:
      annotations:
        checksum/secret: 33a423ecbbdde8656cfee206f3757c98508a6799430b02d4383d565ecc071961
      labels:
        app: harbor
        chart: harbor
        component: notary-signer
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: MIGRATIONS_PATH
              value: migrations/signer/postgresql
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  key: NOTARY_SIGNER_DB_URL
                  name: harbor-notary-server
            - name: NOTARY_SIGNER_DEFAULTALIAS
              value: defaultalias
          image: goharbor/notary-signer-photon:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 7899
              scheme: HTTPS
            initialDelaySeconds: 300
            periodSeconds: 10
          name: notary-signer
          readinessProbe:
            httpGet:
              path: /
              port: 7899
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/notary/signer-config.postgres.json
              name: config
              subPath: signer.json
            - mountPath: /etc/ssl/notary/tls.crt
              name: signer-certificate
              subPath: tls.crt
            - mountPath: /etc/ssl/notary/tls.key
              name: signer-certificate
              subPath: tls.key
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
        - name: config
          secret:
            secretName: harbor-notary-server
        - name: signer-certificate
          secret:
            secretName: harbor-notary-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: portal
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: portal
      release: harbor
  template:
    metadata:
      labels:
        app: harbor
        component: portal
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - image: goharbor/harbor-portal:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: portal
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              name: portal-config
              subPath: nginx.conf
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
        - configMap:
            name: harbor-portal
          name: portal-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: registry
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: 1dd422c1f80f9b0e00e1a2297e956c1da3fb1d6bc24892179accf38bc1e3be96
        checksum/secret: 7f40e6b1d6f42152d3542d5ad748aeb3bd40062aebdeae56f9ff0ade61e43b4a
        checksum/secret-core: 4a1ebc66545b793612f21ecd2e6b806395c221f81238a74f113b60aaa40b72ef
        checksum/secret-jobservice: b55768edd215573500e5157b05fafaceb0e6234331823e8a6588575d62cc7623
      labels:
        app: harbor
        chart: harbor
        component: registry
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - args:
            - serve
            - /etc/registry/config.yml
          envFrom:
            - secretRef:
                name: harbor-registry
          image: goharbor/registry-photon:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: registry
          ports:
            - containerPort: 5000
            - containerPort: 5001
          readinessProbe:
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/passwd
              name: registry-htpasswd
              subPath: passwd
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
        - env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: JOBSERVICE_SECRET
                  name: harbor-jobservice
          envFrom:
            - configMapRef:
                name: harbor-registryctl
            - secretRef:
                name: harbor-registry
            - secretRef:
                name: harbor-registryctl
          image: goharbor/harbor-registryctl:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: registryctl
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /api/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
      securityContext:
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
        - name: registry-htpasswd
          secret:
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
            secretName: harbor-registry-htpasswd
        - configMap:
            name: harbor-registry
          name: registry-config
        - name: registry-data
          persistentVolumeClaim:
            claimName: harbor-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: database
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: database
      release: harbor
  serviceName: harbor-database
  template:
    metadata:
      annotations:
        checksum/secret: 55b1e7be0855a53d12362dc11834f575bd16ba09cdd84b0551bda85635e15ac1
      labels:
        app: harbor
        chart: harbor
        component: database
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: harbor-database
          image: goharbor/harbor-db:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 1
          name: database
          readinessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-data
            - mountPath: /dev/shm
              name: shm-volume
      initContainers:
        - args:
            - -c
            - "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"
          command:
            - /bin/sh
          image: goharbor/harbor-db:v2.7.0
          imagePullPolicy: IfNotPresent
          name: data-migrator
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-data
        - args:
            - -c
            - chmod -R 700 /var/lib/postgresql/data/pgdata || true
          command:
            - /bin/sh
          image: goharbor/harbor-db:v2.7.0
          imagePullPolicy: IfNotPresent
          name: data-permissions-ensurer
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-data
      securityContext:
        fsGroup: 999
        runAsUser: 999
      terminationGracePeriodSeconds: 120
      volumes:
        - emptyDir:
            medium: Memory
            sizeLimit: 512Mi
          name: shm-volume
  volumeClaimTemplates:
    - metadata:
        labels:
          app: harbor
          chart: harbor
          heritage: Helm
          release: harbor
        name: database-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: redis
    heritage: Helm
    release: harbor
  name: harbor-redis
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: redis
      release: harbor
  serviceName: harbor-redis
  template:
    metadata:
      labels:
        app: harbor
        chart: harbor
        component: redis
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - image: goharbor/redis-photon:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            tcpSocket:
              port: 6379
          name: redis
          readinessProbe:
            initialDelaySeconds: 1
            periodSeconds: 10
            tcpSocket:
              port: 6379
          volumeMounts:
            - mountPath: /var/lib/redis
              name: data
      securityContext:
        fsGroup: 999
        runAsUser: 999
      terminationGracePeriodSeconds: 120
  volumeClaimTemplates:
    - metadata:
        labels:
          app: harbor
          chart: harbor
          heritage: Helm
          release: harbor
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: trivy
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: trivy
      release: harbor
  serviceName: harbor-trivy
  template:
    metadata:
      annotations:
        checksum/secret: 81105cb33a8cb2937d69d3a39d46a94953951b6154c8518d288852bcf66b4d6d
      labels:
        app: harbor
        chart: harbor
        component: trivy
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
            - name: SCANNER_LOG_LEVEL
              value: info
            - name: SCANNER_TRIVY_CACHE_DIR
              value: /home/scanner/.cache/trivy
            - name: SCANNER_TRIVY_REPORTS_DIR
              value: /home/scanner/.cache/reports
            - name: SCANNER_TRIVY_DEBUG_MODE
              value: "false"
            - name: SCANNER_TRIVY_VULN_TYPE
              value: os,library
            - name: SCANNER_TRIVY_TIMEOUT
              value: 5m0s
            - name: SCANNER_TRIVY_GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  key: gitHubToken
                  name: harbor-trivy
            - name: SCANNER_TRIVY_SEVERITY
              value: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
            - name: SCANNER_TRIVY_IGNORE_UNFIXED
              value: "false"
            - name: SCANNER_TRIVY_SKIP_UPDATE
              value: "false"
            - name: SCANNER_TRIVY_OFFLINE_SCAN
              value: "false"
            - name: SCANNER_TRIVY_SECURITY_CHECKS
              value: vuln
            - name: SCANNER_TRIVY_INSECURE
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: :8080
            - name: SCANNER_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisURL
                  name: harbor-trivy
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisURL
                  name: harbor-trivy
            - name: SCANNER_JOB_QUEUE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisURL
                  name: harbor-trivy
          image: goharbor/trivy-adapter-photon:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /probe/healthy
              port: api-server
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
          name: trivy
          ports:
            - containerPort: 8080
              name: api-server
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /probe/ready
              port: api-server
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
          volumeMounts:
            - mountPath: /home/scanner/.cache
              name: data
              readOnly: false
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
  volumeClaimTemplates:
    - metadata:
        labels:
          app: harbor
          chart: harbor
          heritage: Helm
          release: harbor
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress
  namespace: harbor
spec:
  ingressClassName: nginx
  rules:
    - host: harbor.kube-ops.localhost
      http:
        paths:
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /api/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /service/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /v2/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /chartrepo/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /c/
            pathType: Prefix
          - backend:
              service:
                name: harbor-portal
                port:
                  number: 80
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - harbor.kube-ops.localhost
      secretName: harbor-ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress-notary
  namespace: harbor
spec:
  ingressClassName: nginx
  rules:
    - host: harbor-notary.kube-ops.localhost
      http:
        paths:
          - backend:
              service:
                name: harbor-notary-server
                port:
                  number: 4443
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - harbor-notary.kube-ops.localhost
      secretName: harbor-ingress
