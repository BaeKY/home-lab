// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Community is a collection of aliases for communities. Users can define named aliases to be used in the BGPPeer CRD.
 *
 * @schema Community
 */
export class Community extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Community"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'metallb.io/v1beta1',
    kind: 'Community',
  }

  /**
   * Renders a Kubernetes manifest for "Community".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CommunityProps = {}): any {
    return {
      ...Community.GVK,
      ...toJson_CommunityProps(props),
    };
  }

  /**
   * Defines a "Community" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CommunityProps = {}) {
    super(scope, id, {
      ...Community.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Community.GVK,
      ...toJson_CommunityProps(resolved),
    };
  }
}

/**
 * Community is a collection of aliases for communities. Users can define named aliases to be used in the BGPPeer CRD.
 *
 * @schema Community
 */
export interface CommunityProps {
  /**
   * @schema Community#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CommunitySpec defines the desired state of Community.
   *
   * @schema Community#spec
   */
  readonly spec?: CommunitySpec;

}

/**
 * Converts an object of type 'CommunityProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CommunityProps(obj: CommunityProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CommunitySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CommunitySpec defines the desired state of Community.
 *
 * @schema CommunitySpec
 */
export interface CommunitySpec {
  /**
   * @schema CommunitySpec#communities
   */
  readonly communities?: CommunitySpecCommunities[];

}

/**
 * Converts an object of type 'CommunitySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CommunitySpec(obj: CommunitySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'communities': obj.communities?.map(y => toJson_CommunitySpecCommunities(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CommunitySpecCommunities
 */
export interface CommunitySpecCommunities {
  /**
   * The name of the alias for the community.
   *
   * @schema CommunitySpecCommunities#name
   */
  readonly name?: string;

  /**
   * The BGP community value corresponding to the given name.
   *
   * @schema CommunitySpecCommunities#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'CommunitySpecCommunities' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CommunitySpecCommunities(obj: CommunitySpecCommunities | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

